@model FloreMoria.Models.ArticoloBlog
@using FloreMoria.Enums;

@{
    ViewBag.Title = "Nuovo Articolo";
}

<style>
    .great-vibes {
        font-family: "Great Vibes", serif;
        font-weight: 400;
        font-style: normal;
    }

    .navbar .navbar-brand,
    .navbar .nav-link {
        color: #369;
    }

        .navbar .nav-link:hover {
            color: white;
        }

    input::placeholder,
    textarea::placeholder {
        color: gray;
    }
</style>

@using (Html.BeginForm("AddArticle", "Admin", FormMethod.Post, new { enctype = "multipart/form-data", @class = "w-3/4 mx-auto pt-24 pb-12" }))
{
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="space-y-12">
        <div class="border-b border-gray-900/10 pb-12">
            <h2 class="text-2xl font-semibold text-gray-900">Nuovo articolo</h2>
            <p class="mt-1 text-lg text-gray-600">Compila le informazioni per aggiungere un nuovo articolo al blog.</p>

            <div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8">
                <!-- TITOLO -->
                <div class="col-span-full">
                    @Html.LabelFor(m => m.Titolo, new { @class = "block text-lg font-medium text-gray-900" })
                    <div class="mt-2">
                        <div class="flex items-center rounded-md bg-white pl-3 outline-1 -outline-offset-1 outline-gray-300 focus-within:outline-2 focus-within:-outline-offset-2 focus-within:outline-[#38679D]">
                            @Html.TextBoxFor(m => m.Titolo, new { @class = "block min-w-0 grow py-1.5 pr-3 pl-1 text-base text-gray-900 placeholder:text-gray-400 focus:outline-none sm:text-lg", placeholder = "Titolo articolo", required = "required" })
                        </div>
                        @Html.ValidationMessageFor(m => m.Titolo, "", new { @class = "text-red-500" })
                    </div>
                </div>

                <!-- TESTO -->
                <div class="col-span-full mb-[6em]">
                    @Html.LabelFor(m => m.Testo, new { @class = "block text-lg font-medium text-gray-900" })
                    <div id="editor-container" class="mt-2 bg-white rounded-b-md p-3"></div>
                    @Html.TextAreaFor(m => m.Testo, new { @id = "hiddenTextarea", style = "display:none;", required = "required" })
                    <p class="mt-3 text-lg text-gray-600">Scrivi il testo completo dell'articolo.</p>
                    @Html.ValidationMessageFor(m => m.Testo, "", new { @class = "text-red-500" })
                </div>

                <!-- TIPOLOGIA ARTICOLO -->
                <div class="col-span-full">
                    @Html.LabelFor(m => m.TipologiaArticolo, new { @class = "block text-lg font-medium text-gray-900" })
                    <div class="mt-2">
                        <div class="flex items-center rounded-md bg-white outline-1 -outline-offset-1 outline-gray-300 focus-within:outline-2 focus-within:-outline-offset-2 focus-within:outline-[#38679D]">
                            @Html.DropDownListFor(m => m.TipologiaArticolo,
                                new SelectList(Enum.GetValues(typeof(TipologiaArticolo)).Cast<TipologiaArticolo>().Select(e => new { Value = (int)e, Text = e.ToString() }), "Value", "Text"),
                                "-- Seleziona una tipologia --",
                                new { @class = "block min-w-0 grow py-1.5 pr-3 pl-1 text-base text-gray-900 text-center placeholder:text-gray-400 focus:outline-none sm:text-lg w-full", required = "required" }
                            )
                        </div>
                        @Html.ValidationMessageFor(m => m.TipologiaArticolo, "", new { @class = "text-red-500" })
                    </div>
                </div>

                <!-- IMMAGINE -->
                <div class="grid grid-cols-1">
                    <div>
                        @Html.LabelFor(m => m.Immagine, "Immagine", new { @class = "block text-lg font-medium text-gray-900" })
                        <div class="mt-2 flex justify-center rounded-lg border border-dashed border-gray-900/25 px-6 py-10">
                            <div class="text-center">
                                <svg class="mx-auto size-12 text-gray-300" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true" data-slot="icon">
                                    <path fill-rule="evenodd" d="M1.5 6a2.25 2.25 0 0 1 2.25-2.25h16.5A2.25 2.25 0 0 1 22.5 6v12a2.25 2.25 0 0 1-2.25 2.25H3.75A2.25 2.25 0 0 1 1.5 18V6ZM3 16.06V18c0 .414.336.75.75.75h16.5A.75.75 0 0 0 21 18v-1.94l-2.69-2.689a1.5 1.5 0 0 0-2.12 0l-.88.879.97.97a.75.75 0 1 1-1.06 1.06l-5.16-5.159a1.5 1.5 0 0 0-2.12 0L3 16.061Zm10.125-7.81a1.125 1.125 0 1 1 2.25 0 1.125 1.125 0 0 1-2.25 0Z"
                                          clip-rule="evenodd" />
                                </svg>
                                <div class="image-upload-container mt-4 flex flex-col text-lg text-gray-600">
                                    <label for="file-upload" class="relative cursor-pointer rounded-md bg-white font-semibold text-[#38679D] focus-within:outline-hidden hover:text-[#38679D]/90">
                                        <span>Carica un file</span>
                                    </label>
                                    <p class="pl-1">o usa il drag and drop</p>
                                    @Html.TextBoxFor(m => m.Immagine, new { type = "file", id = "file-upload", @class = "sr-only", required = "required" })
                                </div>
                                <p class="text-xs/5 text-gray-600">PNG, JPG, GIF fino a 5MB</p>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.Immagine, "", new { @class = "text-red-500" })
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-6 flex items-center justify-end">
        <button type="submit" class="rounded-md bg-[#38679D] px-12 py-2 text-sm font-semibold text-white shadow-xs hover:bg-[#38679D]/90 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#38679D]">
            Salva
        </button>
    </div>
}

@section Scripts {
    @{
        Html.RenderPartial("_ValidationScriptsPartial");
    }
    <script defer>
        document.addEventListener('DOMContentLoaded', function () {
            const dropZones = document.querySelectorAll('.border-dashed');
            const fileInputs = [
                document.getElementById('file-upload')
            ];

            dropZones.forEach((dropZone, index) => {
                const fileInput = fileInputs[index];

                if (!fileInput) return;

                const container = dropZone.querySelector('.text-center');

                const textContainer = dropZone.querySelector('.image-upload-container');

                const previewContainer = document.createElement('div');
                previewContainer.id = `preview-container-${fileInput.id}`;
                previewContainer.classList.add('preview-container', 'mt-2', 'lg:ml-4', 'lg:mt-0');
                previewContainer.style.maxWidth = '100px';
                previewContainer.style.maxHeight = '100px';
                previewContainer.style.margin = 'auto';

                container.appendChild(previewContainer);

                dropZone.addEventListener('dragover', function (event) {
                    event.preventDefault();
                    dropZone.classList.add('bg-gray-200');
                });

                dropZone.addEventListener('dragleave', function () {
                    dropZone.classList.remove('bg-gray-200');
                });

                dropZone.addEventListener('drop', function (event) {
                    event.preventDefault();
                    dropZone.classList.remove('bg-gray-200');

                    const files = event.dataTransfer.files;

                    if (files.length > 0) {
                        fileInput.files = files;
                        const file = files[0];
                        showThumbnail(file, previewContainer);
                    }
                });

                fileInput.addEventListener('change', function (event) {
                    const files = event.target.files;

                    if (files && files.length > 0) {
                        const file = files[0];
                        showThumbnail(file, previewContainer);
                    }
                });

                const label = textContainer.querySelector('label');
                if (label) {
                    label.addEventListener('click', function (event) {
                        event.preventDefault();
                        fileInput.click();
                    });
                }
            });

            function showThumbnail(file, container) {
                container.innerHTML = '';

                const img = document.createElement('img');
                img.classList.add('thumbnail', 'rounded-md', 'mt-2');
                img.style.maxWidth = '100px';
                img.style.maxHeight = '100px';

                const reader = new FileReader();

                reader.onload = function (e) {
                    img.src = e.target.result;
                    container.appendChild(img);
                };

                reader.readAsDataURL(file);
            }
        });
    </script>
}
