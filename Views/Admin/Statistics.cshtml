@model IEnumerable<FloreMoria.Models.Ordine>

@{
    ViewBag.Title = "Dashboard Statistiche";
    var currentYear = DateTime.Now.Year;
    var lastYear = currentYear - 1;
    var prodotti = ViewBag.Prodotti as List<FloreMoria.Models.Prodotto>;

    var ricaviAnnoCorrente = Model.Where(o => o.DataOrdine.Year == currentYear).Sum(o => o.Totale);
    var ordiniAnnoCorrente = Model.Where(o => o.DataOrdine.Year == currentYear).ToList();
    var ordiniMedi = ordiniAnnoCorrente.Count > 0 ? ricaviAnnoCorrente / ordiniAnnoCorrente.Count : 0;

    var ricaviAnnoPrecedente = Model.Where(o => o.DataOrdine.Year == lastYear).Sum(o => o.Totale);

    decimal percentualeDifferenza = 0;
    string segnoPercentuale = "+";
    string classeColore = "text-green-500";

    if (ricaviAnnoPrecedente > 0)
    {
        percentualeDifferenza = ((ricaviAnnoCorrente - ricaviAnnoPrecedente) / ricaviAnnoPrecedente) * 100;
        if (percentualeDifferenza < 0)
        {
            segnoPercentuale = "";
            classeColore = "text-red-500";
            percentualeDifferenza = Math.Abs(percentualeDifferenza);
        }
    }
    else if (ricaviAnnoCorrente > 0)
    {
        percentualeDifferenza = 100;
    }

    var mesi = new[] { "Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre" };
    var datiMensili = Enumerable.Range(1, 12).Select(mese => new
    {
        Nome = mesi[mese - 1],
        Valore = ordiniAnnoCorrente.Where(o => o.DataOrdine.Month == mese).Sum(o => o.Totale),
        Ordini = ordiniAnnoCorrente.Where(o => o.DataOrdine.Month == mese).ToList()
    }).ToList();

    var ordiniDaPartner = Model.Where(o => o.DaPartner).Count();
    var ordiniDiretti = Model.Where(o => !o.DaPartner).Count();

    var categorie = Enum.GetValues(typeof(FloreMoria.Enums.Categoria)).Cast<FloreMoria.Enums.Categoria>().ToList();
    var statisticheCategorie = categorie.Select(categoria => new
    {
        Nome = categoria.ToString(),
        VenditePartner = Model.Where(o => o.DaPartner).SelectMany(o => o.Dettaglio).Where(d => d.Prodotto.Categoria == categoria).Sum(d => d.Quantita),
        VenditeDirette = Model.Where(o => !o.DaPartner).SelectMany(o => o.Dettaglio).Where(d => d.Prodotto.Categoria == categoria).Sum(d => d.Quantita)
    }).ToList();

    var prodottiVenduti = Model
        .SelectMany(o => o.Dettaglio)
        .GroupBy(d => d.ProdottoId)
        .Select(g => new
        {
            ProdottoId = g.Key,
            Nome = prodotti.FirstOrDefault(p => p.Id == g.Key)?.Nome ?? "Prodotto sconosciuto",
            Quantita = g.Sum(d => d.Quantita),
            Ricavo = g.Sum(d => d.Prezzo * d.Quantita)
        })
        .OrderByDescending(x => x.Quantita)
        .Take(10)
        .ToList();
}

<style>
    .great-vibes {
        font-family: "Great Vibes", serif;
        font-weight: 400;
        font-style: normal;
    }

    .navbar .navbar-brand,
    .navbar .nav-link {
        color: #369;
    }

        .navbar .nav-link:hover {
            color: white;
        }

    input::placeholder, textarea::placeholder {
        color: gray;
    }

    input[type="checkbox"].big-checkbox {
        transform: scale(1.3);
        -webkit-transform: scale(1.3);
        -ms-transform: scale(1.3);
        margin-right: 8px;
        vertical-align: baseline;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<section class="bg-gray-100 dark:bg-dark py-20">
    <div class="container mx-auto px-4 py-6 ">
        <h1 class="text-3xl font-bold text-gray-500 mb-8">Dashboard Statistiche</h1>

        <!-- Cards principali -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <!-- Ricavi Anno Corrente -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <h2 class="text-sm font-medium text-gray-500">Ricavi Anno @currentYear</h2>
                        <p class="text-2xl font-bold text-gray-800">€ @ricaviAnnoCorrente.ToString("N2")</p>
                    </div>
                    <div class="p-3 bg-blue-100 rounded-full">
                        <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                </div>
                <div class="flex items-center mt-4">
                    <span class="text-xs font-medium text-gray-500">Rispetto all'anno precedente</span>
                    @if (ricaviAnnoPrecedente > 0 || ricaviAnnoCorrente > 0)
                    {
                        <span class="ml-2 text-xs font-medium @classeColore">@segnoPercentuale@Math.Round(percentualeDifferenza, 1)%</span>
                    }
                    else
                    {
                        <span class="ml-2 text-xs font-medium text-gray-500">+0%</span>
                    }
                </div>
            </div>

            <!-- Ordine Medio -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <h2 class="text-sm font-medium text-gray-500">Ordine Medio</h2>
                        <p class="text-2xl font-bold text-gray-800">€ @ordiniMedi.ToString("N2")</p>
                    </div>
                    <div class="p-3 bg-green-100 rounded-full">
                        <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                </div>
                <div class="flex items-center mt-4">
                    <span class="text-xs font-medium text-gray-500">Numero ordini: @ordiniAnnoCorrente.Count</span>
                </div>
            </div>

            <!-- Provenienza Ordini -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <h2 class="text-sm font-medium text-gray-500">Provenienza Ordini</h2>
                        <p class="text-2xl font-bold text-gray-800">Diretti: @ordiniDiretti | Partner: @ordiniDaPartner</p>
                    </div>
                    <div class="p-3 bg-purple-100 rounded-full">
                        <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                    </div>
                </div>
                <div class="flex items-center mt-4">
                    <span class="text-xs font-medium text-gray-500">Totale ordini: @(ordiniDiretti + ordiniDaPartner)</span>
                </div>
            </div>
        </div>

        <!-- Grafici principali -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <!-- Fatturato mensile -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-lg font-semibold text-gray-500 mb-4">Fatturato Mensile @currentYear</h2>
                <canvas id="chartMensile" class="w-full h-64"></canvas>
            </div>

            <!-- Provenienza ordini (grafico) -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-lg font-semibold text-gray-500 mb-4">Provenienza Ordini</h2>
                <canvas id="chartProvenienza" class="w-full h-64"></canvas>
            </div>
        </div>

        <!-- Statistiche vendite per categoria -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-lg font-semibold text-gray-500 mb-4">Statistiche Vendite per Categoria</h2>
            <canvas id="chartCategorie" class="w-full h-80"></canvas>
        </div>

        <!-- Top prodotti venduti -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-lg font-semibold text-gray-500 mb-4">Top 10 Prodotti Venduti</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Prodotto</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantità Venduta</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ricavo</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var prodotto in prodottiVenduti)
                        {
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@prodotto.Nome</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@prodotto.Quantita</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">€ @prodotto.Ricavo.ToString("N2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Dettaglio mensile degli ordini -->
        <div class="grid grid-cols-1 gap-6">
            @foreach (var mese in datiMensili.Where(m => m.Ordini.Count > 0).OrderByDescending(m => DateTime.ParseExact(m.Nome, "MMMM", System.Globalization.CultureInfo.CurrentCulture).Month))
            {
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-lg font-semibold text-gray-800 mb-4">Dettaglio Ordini - @mese.Nome @currentYear</h2>
                    <div class="flex items-center justify-between mb-4">
                        <p class="text-sm text-gray-500">Totale ordini: @mese.Ordini.Count</p>
                        <p class="text-sm font-medium text-gray-800">Fatturato: € @mese.Valore.ToString("N2")</p>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Data</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cliente</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Articoli</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Totale</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Provenienza</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach (var ordine in mese.Ordini.OrderByDescending(o => o.DataOrdine))
                                {
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@ordine.DataOrdine.ToString("dd/MM/yyyy HH:mm")</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            @if (ordine.ApplicationUser != null)
                                            {
                                                if (!string.IsNullOrEmpty(ordine.ApplicationUser.RagioneSociale))
                                                {
                                                    @ordine.ApplicationUser.RagioneSociale
                                                }
                                                else
                                                {
                                                    @(ordine.ApplicationUser.Nome + " " + ordine.ApplicationUser.Cognome)
                                                }
                                            }
                                            else
                                            {
                                                <span>Cliente non disponibile</span>
                                            }
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@ordine.Quantita</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">€ @ordine.Totale.ToString("N2")</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            @if (ordine.DaPartner)
                                            {
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-purple-100 text-purple-800">Partner</span>
                                            }
                                            else
                                            {
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Diretto</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', function() {
    const hasDati = @(ordiniAnnoCorrente.Count > 0 ? "true" : "false");

    const defaultHeight = 250;

    // Dati per il grafico mensile
    const dataMensile = {
        labels: [@Html.Raw(string.Join(", ", datiMensili.Select(m => $"'{m.Nome}'")))],
        datasets: [{
            label: 'Fatturato mensile',
            backgroundColor: 'rgba(59, 130, 246, 0.2)',
            borderColor: 'rgba(59, 130, 246, 1)',
            borderWidth: 1,
            data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(datiMensili.Select(m => m.Valore)))
        }]
    };

    // Dati per il grafico provenienza
    const dataProvenienza = {
        labels: ['Ordini Diretti', 'Ordini da Partner'],
        datasets: [{
            data: [@ordiniDiretti, @ordiniDaPartner],
            backgroundColor: [
                'rgba(52, 211, 153, 0.8)',
                'rgba(139, 92, 246, 0.8)'
            ],
            borderColor: [
                'rgba(52, 211, 153, 1)',
                'rgba(139, 92, 246, 1)'
            ],
            borderWidth: 1
        }]
    };

    // Dati per il grafico categorie
    const dataCategorie = {
        labels: [@Html.Raw(string.Join(", ", statisticheCategorie.Select(c => $"'{c.Nome}'")))],
        datasets: [
            {
                label: 'Vendite Partner',
                backgroundColor: 'rgba(139, 92, 246, 0.6)',
                data: [@string.Join(", ", statisticheCategorie.Select(c => c.VenditePartner))]
            },
            {
                label: 'Vendite Dirette',
                backgroundColor: 'rgba(52, 211, 153, 0.6)',
                data: [@string.Join(", ", statisticheCategorie.Select(c => c.VenditeDirette))]
            }
        ]
    };

    // Opzioni comuni per grafici vuoti
    const emptyChartOptions = {
        responsive: true,
        maintainAspectRatio: true,
        aspectRatio: 2,  // Rapporto larghezza/altezza fisso
        plugins: {
            legend: {
                display: false
            },
            title: {
                display: true,
                text: 'Nessun dato disponibile',
                font: {
                    size: 16
                }
            }
        },
        scales: {
            x: {
                display: false
            },
            y: {
                display: false
            }
        }
    };

    // Configurazione grafico mensile
    const chartMensile = new Chart(
        document.getElementById('chartMensile'),
        {
            type: 'bar',
            data: dataMensile,
            options: hasDati ? {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 2,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '€ ' + value;
                            }
                        }
                    }
                }
            } : emptyChartOptions
        }
    );

    // Configurazione grafico provenienza
    const chartProvenienza = new Chart(
        document.getElementById('chartProvenienza'),
        {
            type: 'pie',
            data: dataProvenienza,
            options: hasDati ? {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 2,
                plugins: {
                    legend: {
                        position: 'bottom'
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.raw || 0;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = Math.round((value / total) * 100);
                                return `${label}: ${value} (${percentage}%)`;
                            }
                        }
                    }
                }
            } : emptyChartOptions
        }
    );

    // Configurazione grafico categorie
    const chartCategorie = new Chart(
        document.getElementById('chartCategorie'),
        {
            type: 'bar',
            data: dataCategorie,
            options: hasDati ? {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 3,
                scales: {
                    x: {
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        beginAtZero: true,
                        grid: {
                            borderDash: [2, 4]
                        }
                    }
                },
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            } : {
                ...emptyChartOptions,
                aspectRatio: 3
            }
        }
    );
});
</script>

