@model IEnumerable<Floremoria.Models.ApplicationUser>

@{
    ViewBag.Title = "Lista_Utenti";
}

<style>
    .great-vibes {
        font-family: "Great Vibes", serif;
        font-weight: 400;
        font-style: normal;
    }

    .navbar .navbar-brand,
    .navbar .nav-link {
        color: #369;
    }

        .navbar .nav-link:hover {
            color: white;
        }

    input::placeholder, textarea::placeholder {
        color: gray;
    }

    [x-cloak] {
        display: none !important;
    }
</style>

<div class="px-4 sm:px-8 pt-24 bg-gray-100 min-h-[85vh]">
    <div class="container mx-auto">
        <div>
            <h2 class="text-2xl font-semibold leading-tight">Utenti</h2>
        </div>

        <div class="flex flex-col sm:flex-row justify-between items-center my-4">
            <div class="flex items-center mb-4 sm:mb-0">
                <label for="itemsPerPage" class="mr-2 text-sm text-gray-600">Elementi per pagina:</label>
                <select id="itemsPerPage" class="border border-gray-300 rounded px-3 py-2 text-sm focus:outline-none focus:ring focus:ring-indigo-200 bg-white">
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
            </div>

            <div class="relative w-full sm:w-auto bg-white">
                <input type="text" id="searchInput" placeholder="Cerca..." class="border border-gray-300 rounded pl-10 pr-3 py-2 text-sm w-full focus:outline-none focus:ring focus:ring-indigo-200" />
                <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-6a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
            </div>
        </div>

        <div class="-mx-4 sm:-mx-8 px-4 sm:px-8 py-4">
            <div class="inline-block w-full shadow-lg rounded-lg overflow-x-auto">
                <div class="overflow-x-auto w-full">
                    <table class="w-full leading-normal">
                        <thead>
                            <tr>
                                <th class="px-5 py-3 border-b border-gray-200 bg-gray-200 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                                    Nome Utente
                                </th>
                                <th class="px-5 py-3 border-b border-gray-200 bg-gray-200 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                                    Numero Ordini
                                </th>
                                <th class="px-5 py-3 border-b border-gray-200 bg-gray-200 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                                    Totale Ordini
                                </th>
                                <th class="px-5 py-3 border-b border-gray-200 bg-gray-200 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                                    Attivo
                                </th>
                                <th class="px-5 py-3 border-b border-gray-200 bg-gray-200 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                                    Azioni
                                </th>
                            </tr>
                        </thead>
                        <tbody id="tableBody">
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm whitespace-nowrap">@item.Nome @item.Cognome</td>
                                    <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">@item.Ordine.Count</td>
                                    <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">@item.Ordine.Sum(x => x.Totale).ToString("C")</td>
                                    <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">@(item.IsAttivo ? "SI" : "NO")</td>
                                    <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                                        <div class="container mx-auto">
                                            <a href="/Admin/UserProfile/@item.Id"
                                               class="px-4 py-1 text-base font-medium text-white rounded-full bg-[#38679D] cursor-pointer whitespace-nowrap">
                                                Profilo
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="px-5 py-5 bg-white border-t flex flex-col xs:flex-row items-center xs:justify-between">
                    <span id="paginationInfo" class="text-xs xs:text-sm text-gray-900">
                        Mostrando <span id="startItem">1</span> a <span id="endItem">5</span> di <span id="totalItems">@Model.Count()</span> elementi
                    </span>

                    <div class="inline-flex mt-2 xs:mt-0">
                        <button id="prevButton" class="text-sm bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-l">
                            Precedente
                        </button>
                        <button id="nextButton" class="text-sm bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-r">
                            Successivo
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (TempData["Successo"] != null || TempData["Errore"] != null)
{
    <section class="bg-gray-2 py-[60px] dark:bg-dark fixed bottom-0 right-1 lg:right-5"
             x-data="{ toastOpen: true, timer: null }"
             x-init="timer=setTimeout(() =>
                            {
                            toastOpen = false;
                            }, 5000);
            "
             x-on:click.away="clearTimeout(timer);
                            toastOpen = false;
            "
             x-on:mouseover="clearTimeout(timer)"
             x-on:mouseout="timer = setTimeout(() => {
                            toastOpen = false;
                            }, 5000);
            "
             :class="toastOpen ? 'block' : 'hidden'">
        <div class="mx-auto px-4 sm:container">
            <div class="relative flex min-w-[350px] lg:min-w-[450px] items-center rounded-lg border border-gray-200 bg-white p-4 py-[18px] shadow-xl sm:px-[30px] dark:border-dark-3 dark:bg-dark-2 dark:shadow-box-dark">
                @if (TempData["Successo"] != null)
                {
                    <div class="mr-5 flex h-10 w-full max-w-[40px] items-center justify-center rounded-full bg-[#38679D]">
                        <svg width="24"
                             height="25"
                             viewBox="0 0 24 25"
                             fill="none"
                             xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 1.17499C5.7375 1.17499 0.675003 6.23749 0.675003 12.5C0.675003 18.7625 5.7375 23.8625 12 23.8625C18.2625 23.8625 23.3625 18.7625 23.3625 12.5C23.3625 6.23749 18.2625 1.17499 12 1.17499ZM12 22.175C6.675 22.175 2.3625 17.825 2.3625 12.5C2.3625 7.17499 6.675 2.86249 12 2.86249C17.325 2.86249 21.675 7.21249 21.675 12.5375C21.675 17.825 17.325 22.175 12 22.175Z"
                                  fill="white" />
                            <path d="M15.225 9.01248L10.7625 13.3625L8.7375 11.375C8.4 11.0375 7.875 11.075 7.5375 11.375C7.2 11.7125 7.2375 12.2375 7.5375 12.575L9.9375 14.9C10.1625 15.125 10.4625 15.2375 10.7625 15.2375C11.0625 15.2375 11.3625 15.125 11.5875 14.9L16.425 10.25C16.7625 9.91248 16.7625 9.38748 16.425 9.04998C16.0875 8.71248 15.5625 8.71248 15.225 9.01248Z"
                                  fill="white" />
                        </svg>
                    </div>
                }
                else if (TempData["Errore"] != null)
                {
                    <div class="mr-5 flex h-10 w-full max-w-[40px] items-center justify-center rounded-full bg-red-500">
                        <svg width="24"
                             height="25"
                             viewBox="0 0 24 25"
                             fill="none"
                             xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 1.17499C5.7375 1.17499 0.675003 6.23749 0.675003 12.5C0.675003 18.7625 5.7375 23.8625 12 23.8625C18.2625 23.8625 23.3625 18.7625 23.3625 12.5C23.3625 6.23749 18.2625 1.17499 12 1.17499ZM12 22.175C6.675 22.175 2.3625 17.825 2.3625 12.5C2.3625 7.17499 6.675 2.86249 12 2.86249C17.325 2.86249 21.675 7.21249 21.675 12.5375C21.675 17.825 17.325 22.175 12 22.175Z"
                                  fill="white" />
                            <path d="M15.5625 9.43751C15.3094 9.18439 14.9156 9.18439 14.6625 9.43751L12 12.1L9.3375 9.43751C9.08437 9.18439 8.69062 9.18439 8.4375 9.43751C8.18437 9.69064 8.18437 10.0844 8.4375 10.3375L11.1 13L8.4375 15.6625C8.18437 15.9156 8.18437 16.3094 8.4375 16.5625C8.55 16.675 8.71875 16.7594 8.8875 16.7594C9.05625 16.7594 9.225 16.7031 9.3375 16.5625L12 13.9L14.6625 16.5625C14.775 16.675 14.9437 16.7594 15.1125 16.7594C15.2812 16.7594 15.45 16.7031 15.5625 16.5625C15.8156 16.3094 15.8156 15.9156 15.5625 15.6625L12.9 13L15.5625 10.3375C15.8156 10.0844 15.8156 9.69064 15.5625 9.43751Z"
                                  fill="white" />
                        </svg>
                    </div>
                }
                <div class="flex w-full items-center justify-between">
                    <div>
                        @{
                            var title = TempData["Successo"] != null ? "Ottimo" : TempData["Errore"] != null ? "Attenzione" : null;
                            var message = TempData["Successo"] != null ? TempData["Successo"] : TempData["Errore"] != null ? TempData["Errore"] : null;
                            <h6 class="text-base font-semibold text-dark sm:text-lg dark:text-white">
                                @title
                            </h6>
                            <p class="text-sm text-body-color dark:text-dark-6 text-nowrap">
                                @message
                            </p>
                        }
                    </div>

                    <button class="text-dark-5 hover:text-red cursor-pointer" x-on:click="clearTimeout(timer); toastOpen = !toastOpen">
                        <svg width="18"
                             height="18"
                             viewBox="0 0 18 18"
                             fill="none"
                             xmlns="http://www.w3.org/2000/svg"
                             class="fill-current">
                            <path d="M9.9 9.00001L16.7625 2.13751C17.0156 1.88439 17.0156 1.49064 16.7625 1.23751C16.5094 0.984387 16.1156 0.984387 15.8625 1.23751L9 8.10001L2.1375 1.23751C1.88437 0.984387 1.49062 0.984387 1.2375 1.23751C0.984372 1.49064 0.984372 1.88439 1.2375 2.13751L8.1 9.00001L1.2375 15.8625C0.984372 16.1156 0.984372 16.5094 1.2375 16.7625C1.35 16.875 1.51875 16.9594 1.6875 16.9594C1.85625 16.9594 2.025 16.9031 2.1375 16.7625L9 9.90001L15.8625 16.7625C15.975 16.875 16.1437 16.9594 16.3125 16.9594C16.4812 16.9594 16.65 16.9031 16.7625 16.7625C17.0156 16.5094 17.0156 16.1156 16.7625 15.8625L9.9 9.00001Z" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </section>
}

<script defer>
    document.addEventListener('DOMContentLoaded', function() {
        const itemsPerPageSelect = document.getElementById('itemsPerPage');
        const searchInput = document.getElementById('searchInput');
        const tableBody = document.getElementById('tableBody');
        const paginationInfo = document.getElementById('paginationInfo');
        const prevButton = document.getElementById('prevButton');
        const nextButton = document.getElementById('nextButton');

        if (!itemsPerPageSelect || !searchInput || !tableBody || !paginationInfo || !prevButton || !nextButton) {
            console.error('Uno o più elementi non sono stati trovati nel DOM.');
            return;
        }

        let currentPage = 1;
        let itemsPerPage = parseInt(itemsPerPageSelect.value);
        let searchTerm = '';
        let allRows = Array.from(tableBody.querySelectorAll('tr'));

        function updatePagination() {
            let startIndex = (currentPage - 1) * itemsPerPage;
            let endIndex = Math.min(startIndex + itemsPerPage, allRows.length);
            let totalPages = Math.ceil(allRows.length / itemsPerPage);

            allRows.forEach(row => row.style.display = 'none');

            for (let i = startIndex; i < endIndex; i++) {
                allRows[i].style.display = '';
            }

            const startItem = document.getElementById('startItem');
            const endItem = document.getElementById('endItem');
            const totalItems = document.getElementById('totalItems');

            if (startItem && endItem && totalItems) {
                startItem.textContent = startIndex + 1;
                endItem.textContent = endIndex;
                totalItems.textContent = allRows.length;
            } else {
                console.error('Uno o più elementi interni a paginationInfo non sono stati trovati.');
                return;
            }

            prevButton.disabled = currentPage === 1;
            nextButton.disabled = currentPage === totalPages || totalPages === 0;
        }

        function filterRows() {
            searchTerm = searchInput.value.toLowerCase();
            allRows = Array.from(tableBody.querySelectorAll('tr'));
            allRows.forEach(row => {
                const textContent = row.textContent.toLowerCase();
                row.style.display = textContent.includes(searchTerm) ? '' : 'none';
            });
            allRows = allRows.filter(row => row.style.display !== 'none');
            currentPage = 1;
            updatePagination();
        }


        itemsPerPageSelect.addEventListener('change', function() {
            itemsPerPage = parseInt(this.value);
            currentPage = 1;
            updatePagination();
        });

        searchInput.addEventListener('input', filterRows);

        prevButton.addEventListener('click', function() {
            if (currentPage > 1) {
                currentPage--;
                updatePagination();
            }
        });

        nextButton.addEventListener('click', function() {
            let totalPages = Math.ceil(allRows.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                updatePagination();
            }
        });

        updatePagination();
    });
</script>


